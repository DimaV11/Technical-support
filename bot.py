import telebot
from telebot import types
from config import API_TOKEN, ADMIN_PASSWORD, ADMIN_USERNAME
from database import create_db, register_user, authenticate_user, save_request, get_requests, get_all_faq_items, delete_user

bot = telebot.TeleBot(API_TOKEN)

user_auth_status = {}

try:
    FAQ = get_all_faq_items()
    if not FAQ:
        print("FAQ –ø—É—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ load_initial_faq_data() –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ database.py.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    FAQ = {}

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_auth_status[chat_id] = None
    show_auth_menu(chat_id)

def show_auth_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(types.KeyboardButton('üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
    markup.add(types.KeyboardButton('‚úÖ –í—Ö–æ–¥'))
    markup.add(types.KeyboardButton('üõ° –í—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'))
    markup.add(types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'))
    bot.send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
def delete_account_request(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "üîí –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:")
    bot.register_next_step_handler(message, process_delete_username)

def process_delete_username(message):
    chat_id = message.chat.id
    entered_login = message.text.strip()
    bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:")
    bot.register_next_step_handler(message, lambda msg: finalize_delete_account(msg, entered_login))

def finalize_delete_account(message, entered_login):
    chat_id = message.chat.id
    password = message.text.strip()
    user_data = authenticate_user(entered_login, password)  
    if user_data:
        delete_user(entered_login)
        bot.reply_to(message, "üóë –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        start(message)  
    else:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        start(message)

@bot.message_handler(func=lambda message: message.text == 'üõ° –í—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
def admin_login_request(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "üëÆ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    bot.register_next_step_handler(message, process_admin_username)

def process_admin_username(message):
    chat_id = message.chat.id
    username_entered = message.text.strip()
    bot.send_message(chat_id, "üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    bot.register_next_step_handler(message, lambda msg: finalize_admin_login(msg, username_entered))

def finalize_admin_login(message, entered_username):
    chat_id = message.chat.id
    password_entered = message.text.strip()

    if entered_username == ADMIN_USERNAME and password_entered == ADMIN_PASSWORD:
        user_auth_status[chat_id] = 'admin'
        bot.reply_to(message, "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏.")
        show_admin_main_menu(chat_id)
    else:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        start(message)

def show_admin_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(types.KeyboardButton('‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã'))
    markup.add(types.KeyboardButton('‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'))
    markup.add(types.KeyboardButton('üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã'))
    markup.add(types.KeyboardButton('üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'))
    bot.send_message(chat_id, "üåü –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ß–µ–º –∑–∞–π–º–µ–º—Å—è?", reply_markup=markup)

def show_user_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(types.KeyboardButton('‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã'))
    markup.add(types.KeyboardButton('‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'))
    markup.add(types.KeyboardButton('üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞'))
    bot.send_message(chat_id, "üåü –ú–µ–Ω—é. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '‚úÖ –í—Ö–æ–¥')
def user_login_request(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω")
    bot.register_next_step_handler(message, process_user_login)

def process_user_login(message):
    chat_id = message.chat.id
    login = message.text.strip()
    bot.send_message(chat_id, "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, lambda msg: finalize_user_login(msg, login))

def finalize_user_login(message, entered_login):
    chat_id = message.chat.id
    password = message.text.strip()
    user_data = authenticate_user(entered_login, password)
    if user_data:
        user_auth_status[chat_id] = 'user'
        bot.reply_to(message, f"ü•≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {entered_login}! –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏.")
        show_user_main_menu(chat_id)
    else:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        start(message)

@bot.message_handler(func=lambda message: message.text == 'üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
def register_user_request(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    bot.register_next_step_handler(message, process_user_registration_email)

def process_user_registration_email(message):
    chat_id = message.chat.id
    email = message.text.strip()

    if not email:
        bot.send_message(chat_id, "‚ùå –õ–æ–≥–∏–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail:")
        bot.register_next_step_handler(message, process_user_registration_email)
        return

    if len(email) < 3 or len(email) > 20:
        bot.send_message(chat_id, "üö´ –õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω:")
        bot.register_next_step_handler(message, process_user_registration_email)
        return

    bot.send_message(chat_id, "üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    bot.register_next_step_handler(message, lambda msg: process_user_registration_password(msg, email))

def process_user_registration_password(message, email):
    chat_id = message.chat.id
    password = message.text.strip()

    if len(password) < 6 or len(password) > 24:
        bot.send_message(chat_id, "üö´ –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 6 –¥–æ 24 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å:")
        bot.register_next_step_handler(message, lambda msg: process_user_registration_password(msg, email))
        return

    if register_user(chat_id, email, password): 
        user_auth_status[chat_id] = True
        bot.reply_to(message, "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        show_user_main_menu(chat_id)
    else:
        bot.reply_to(message, "üòî –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–ª–∏ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        start(message)


MAIN_MENU_BUTTON = "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
FAQ_KEYBOARD_MARKUP = None

def create_faq_markup():
    global FAQ_KEYBOARD_MARKUP
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    if FAQ:
        for theme in FAQ:
            markup.add(types.KeyboardButton(theme))
        markup.add(types.KeyboardButton(MAIN_MENU_BUTTON)) 
        FAQ_KEYBOARD_MARKUP = markup 
    return FAQ_KEYBOARD_MARKUP

@bot.message_handler(func=lambda message: True)
def handle_main_menu_messages(message):
    chat_id = message.chat.id
    user_message = message.text.strip()

    current_auth_status = user_auth_status.get(chat_id)

    if current_auth_status:
        if user_message == '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã':
            bot.send_message(chat_id, "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
            markup = create_faq_markup() 
            if markup:
                bot.send_message(chat_id, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=markup)
            else:
                bot.send_message(chat_id, "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ä–∞–∑–¥–µ–ª FAQ –ø–æ–∫–∞ –ø—É—Å—Ç.")

        elif user_message in FAQ:
            bot.reply_to(message, f"üìñ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{FAQ[user_message]}")

        elif user_message == MAIN_MENU_BUTTON:
            bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            if current_auth_status == 'admin':
                show_admin_main_menu(chat_id)
            else:
                show_user_main_menu(chat_id)

        elif user_message == '‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π':
            bot.send_message(chat_id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
            save_request(chat_id, user_message, "support")

        elif user_message == 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã' and current_auth_status == 'admin':
            requests = get_requests()
            if requests:
                response = "üìã **–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:**\n\n"
                for req in requests:
                    response += f"‚ú® ID: `{req[0]}`\n" \
                                f"üë§ User ID: `{req[1]}`\n" \
                                f"üìù Message: `{req[2]}`\n" \
                                f"üè∑ Department: `{req[3]}`\n" \
                                f"üìÖ Date: `{req[4]}`\n" \
                                f"--------------------\n"
                bot.send_message(chat_id, response, parse_mode='Markdown')
            else:
                bot.send_message(chat_id, "üåü –ó–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

        elif user_message == 'üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' and current_auth_status == 'admin':
            user_auth_status[chat_id] = None
            bot.reply_to(message, "üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            start(message)

        elif user_message == 'üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞':
            user_auth_status[chat_id] = None
            bot.reply_to(message, "üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
            start(message)

        else:
            bot.reply_to(message, "ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –í–∞—à –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            save_request(chat_id, user_message, "user")
    else:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ–Ω—é –Ω–∏–∂–µ.")
        start(message)

if __name__ == '__main__':
    

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()
